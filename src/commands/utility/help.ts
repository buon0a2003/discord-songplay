import { SlashCommandBuilder, Client, CommandInteraction, EmbedBuilder } from "discord.js";

export const data = new SlashCommandBuilder()
  .setName("help")
  .setDescription("Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh v√† c√°ch s·ª≠ d·ª•ng")
  .addStringOption(option =>
    option.setName("command")
      .setDescription("T√™n l·ªánh c·ª• th·ªÉ ƒë·ªÉ xem chi ti·∫øt")
      .setRequired(false)
  );

export async function execute(client: Client, interaction: CommandInteraction) {
  const commandName = (interaction as any).options?.getString("command");
  
  if (commandName) {
    // Show detailed help for a specific command
    const command = client.commands.get(commandName.toLowerCase());
    if (!command) {
      await interaction.reply({ 
        content: `‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh \`${commandName}\`!`, 
        ephemeral: true 
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setColor(0x0099FF)
      .setTitle(`üìñ Chi ti·∫øt l·ªánh: /${command.data.name}`)
      .setDescription(command.data.description || "Kh√¥ng c√≥ m√¥ t·∫£")
      .addFields(
        { name: "C√°ch s·ª≠ d·ª•ng", value: `\`/${command.data.name}\``, inline: false }
      );

    // Add options if the command has any
    if (command.data.options && command.data.options.length > 0) {
      const optionsText = command.data.options.map((option: any) => {
        const required = option.required ? " (b·∫Øt bu·ªôc)" : " (t√πy ch·ªçn)";
        return `‚Ä¢ \`${option.name}\`${required}: ${option.description}`;
      }).join('\n');
      
      embed.addFields({ name: "Tham s·ªë", value: optionsText, inline: false });
    }

    await interaction.reply({ embeds: [embed] });
    return;
  }

  // Show all commands grouped by category
  const commandsByCategory = new Map<string, any[]>();
  
  client.commands.forEach((command, name) => {
    // Determine category based on file path (stored in the command loading process)
    // Since we can't access file path directly, we'll categorize by command patterns
    let category = "üõ†Ô∏è Ti·ªán √≠ch";
    
    const musicCommands = ["play", "pause", "resume", "stop", "skip", "queue", "playlist"];
    if (musicCommands.includes(name)) {
      category = "üéµ √Çm nh·∫°c";
    }
    
    if (!commandsByCategory.has(category)) {
      commandsByCategory.set(category, []);
    }
    
    commandsByCategory.get(category)!.push({
      name: command.data.name,
      description: command.data.description || "Kh√¥ng c√≥ m√¥ t·∫£"
    });
  });

  const embed = new EmbedBuilder()
    .setColor(0x0099FF)
    .setTitle("üìö Danh s√°ch l·ªánh")
    .setDescription("S·ª≠ d·ª•ng `/help <t√™n_l·ªánh>` ƒë·ªÉ xem chi ti·∫øt m·ªôt l·ªánh c·ª• th·ªÉ")
    .setFooter({ text: "üí° M·∫πo: T·∫•t c·∫£ l·ªánh ƒë·ªÅu b·∫Øt ƒë·∫ßu b·∫±ng d·∫•u /" });

  commandsByCategory.forEach((commands, category) => {
    const commandList = commands
      .sort((a, b) => a.name.localeCompare(b.name))
      .map(cmd => `‚Ä¢ \`/${cmd.name}\` - ${cmd.description}`)
      .join('\n');
    
    embed.addFields({ 
      name: category, 
      value: commandList || "Kh√¥ng c√≥ l·ªánh n√†o", 
      inline: false 
    });
  });

  await interaction.reply({ embeds: [embed] });
} 